{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP4bDK551zVudqdd3T8OV1b",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AmiteshPuri/Accidend-Severity-Prediction/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MFQXwk7Nkv8t",
        "outputId": "19523d51-9da4-4384-ee13-6db6005ae4c9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting cohere\n",
            "  Downloading cohere-4.11.2-py3-none-any.whl (39 kB)\n",
            "Collecting streamlit\n",
            "  Downloading streamlit-1.24.1-py2.py3-none-any.whl (8.9 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m72.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: aiohttp<4.0,>=3.0 in /usr/local/lib/python3.10/dist-packages (from cohere) (3.8.4)\n",
            "Collecting backoff<3.0,>=2.0 (from cohere)\n",
            "  Downloading backoff-2.2.1-py3-none-any.whl (15 kB)\n",
            "Collecting importlib_metadata<7.0,>=6.0 (from cohere)\n",
            "  Downloading importlib_metadata-6.8.0-py3-none-any.whl (22 kB)\n",
            "Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from cohere) (2.27.1)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.2.2)\n",
            "Collecting blinker<2,>=1.0.0 (from streamlit)\n",
            "  Downloading blinker-1.6.2-py3-none-any.whl (13 kB)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (5.3.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.1.3)\n",
            "Requirement already satisfied: numpy<2,>=1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.22.4)\n",
            "Requirement already satisfied: packaging<24,>=14.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (23.1)\n",
            "Requirement already satisfied: pandas<3,>=0.25 in /usr/local/lib/python3.10/dist-packages (from streamlit) (1.5.3)\n",
            "Requirement already satisfied: pillow<10,>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.4.0)\n",
            "Requirement already satisfied: protobuf<5,>=3.20 in /usr/local/lib/python3.10/dist-packages (from streamlit) (3.20.3)\n",
            "Requirement already satisfied: pyarrow>=4.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (9.0.0)\n",
            "Collecting pympler<2,>=0.9 (from streamlit)\n",
            "  Downloading Pympler-1.0.1-py3-none-any.whl (164 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m164.8/164.8 kB\u001b[0m \u001b[31m19.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: python-dateutil<3,>=2 in /usr/local/lib/python3.10/dist-packages (from streamlit) (2.8.2)\n",
            "Requirement already satisfied: rich<14,>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (13.4.2)\n",
            "Requirement already satisfied: tenacity<9,>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from streamlit) (8.2.2)\n",
            "Requirement already satisfied: toml<2 in /usr/local/lib/python3.10/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from streamlit) (4.6.3)\n",
            "Collecting tzlocal<5,>=1.1 (from streamlit)\n",
            "  Downloading tzlocal-4.3.1-py3-none-any.whl (20 kB)\n",
            "Collecting validators<1,>=0.2 (from streamlit)\n",
            "  Downloading validators-0.20.0.tar.gz (30 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting gitpython!=3.1.19,<4,>=3 (from streamlit)\n",
            "  Downloading GitPython-3.1.31-py3-none-any.whl (184 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m184.3/184.3 kB\u001b[0m \u001b[31m21.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pydeck<1,>=0.1.dev5 (from streamlit)\n",
            "  Downloading pydeck-0.8.1b0-py2.py3-none-any.whl (4.8 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m78.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.10/dist-packages (from streamlit) (6.3.1)\n",
            "Collecting watchdog (from streamlit)\n",
            "  Downloading watchdog-3.0.0-py3-none-manylinux2014_x86_64.whl (82 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.1/82.1 kB\u001b[0m \u001b[31m10.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.0->cohere) (23.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.0->cohere) (2.0.12)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.0->cohere) (6.0.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.0->cohere) (4.0.2)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.0->cohere) (1.9.2)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.0->cohere) (1.3.3)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4.0,>=3.0->cohere) (1.3.1)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (3.1.2)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (4.3.3)\n",
            "Requirement already satisfied: toolz in /usr/local/lib/python3.10/dist-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
            "Collecting gitdb<5,>=4.0.1 (from gitpython!=3.1.19,<4,>=3->streamlit)\n",
            "  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib_metadata<7.0,>=6.0->cohere) (3.15.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3,>=0.25->streamlit) (2022.7.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil<3,>=2->streamlit) (1.16.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0,>=2.0->cohere) (1.26.16)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0,>=2.0->cohere) (2023.5.7)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0,>=2.0->cohere) (3.4)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.11.0->streamlit) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich<14,>=10.11.0->streamlit) (2.14.0)\n",
            "Collecting pytz-deprecation-shim (from tzlocal<5,>=1.1->streamlit)\n",
            "  Downloading pytz_deprecation_shim-0.1.0.post0-py2.py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: decorator>=3.4.0 in /usr/local/lib/python3.10/dist-packages (from validators<1,>=0.2->streamlit) (4.4.2)\n",
            "Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3->streamlit)\n",
            "  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
            "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.19.3)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich<14,>=10.11.0->streamlit) (0.1.2)\n",
            "Collecting tzdata (from pytz-deprecation-shim->tzlocal<5,>=1.1->streamlit)\n",
            "  Downloading tzdata-2023.3-py2.py3-none-any.whl (341 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m341.8/341.8 kB\u001b[0m \u001b[31m35.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hBuilding wheels for collected packages: validators\n",
            "  Building wheel for validators (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for validators: filename=validators-0.20.0-py3-none-any.whl size=19579 sha256=2a449f83e7becc20033b62ab6c81eacaee0b3433ef979be2359eef80b73ffce9\n",
            "  Stored in directory: /root/.cache/pip/wheels/f2/ed/dd/d3a556ad245ef9dc570c6bcd2f22886d17b0b408dd3bbb9ac3\n",
            "Successfully built validators\n",
            "Installing collected packages: watchdog, validators, tzdata, smmap, pympler, importlib_metadata, blinker, backoff, pytz-deprecation-shim, pydeck, gitdb, tzlocal, gitpython, cohere, streamlit\n",
            "  Attempting uninstall: tzlocal\n",
            "    Found existing installation: tzlocal 5.0.1\n",
            "    Uninstalling tzlocal-5.0.1:\n",
            "      Successfully uninstalled tzlocal-5.0.1\n",
            "Successfully installed backoff-2.2.1 blinker-1.6.2 cohere-4.11.2 gitdb-4.0.10 gitpython-3.1.31 importlib_metadata-6.8.0 pydeck-0.8.1b0 pympler-1.0.1 pytz-deprecation-shim-0.1.0.post0 smmap-5.0.0 streamlit-1.24.1 tzdata-2023.3 tzlocal-4.3.1 validators-0.20.0 watchdog-3.0.0\n"
          ]
        }
      ],
      "source": [
        "! pip install cohere streamlit"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import cohere\n",
        "import streamlit as st\n",
        "\n",
        "co=cohere.Client(\"mncDyTKiPo2ssXnytXghaDCnTb19wIOrPmBslpdr\")"
      ],
      "metadata": {
        "id": "0Vz6qw3ik-aV"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_idea(startup_industry, creativity):\n",
        "    \"\"\"\n",
        "    Generate startup idea given an industry name\n",
        "    Arguments:\n",
        "    industry(str): the industry name\n",
        "    temperature(str): the Generate model `temperature` value\n",
        "    Returns:\n",
        "    response(str): the startup idea\n",
        "    \"\"\"\n",
        "    idea_prompt = f\"\"\"Generate a startup idea given the industry. Here are a few examples.\n",
        "\n",
        "--\n",
        "Industry: Workplace\n",
        "Startup Idea: A platform that generates slide deck contents automatically based on a given outline\n",
        "\n",
        "--\n",
        "Industry: Home Decor\n",
        "Startup Idea: An app that calculates the best position of your indoor plants for your apartment\n",
        "\n",
        "--\n",
        "Industry: Healthcare\n",
        "Startup Idea: A hearing aid for the elderly that automatically adjusts its levels and with a battery \\\n",
        "lasting a whole week\n",
        "\n",
        "--\n",
        "Industry: Education\n",
        "Startup Idea: An online primary school that lets students mix and match their own curriculum based on \\\n",
        "their interests and goals\n",
        "\n",
        "--\n",
        "Industry:{startup_industry}\n",
        "Startup Idea: \"\"\"\n",
        "\n",
        "    # Call the Cohere Generate endpoint\n",
        "    response = co.generate(\n",
        "        model=\"command-nightly\",\n",
        "        prompt=idea_prompt,\n",
        "        max_tokens=50,\n",
        "        temperature=creativity,\n",
        "        k=0,\n",
        "        stop_sequences=[\"--\"],\n",
        "    )\n",
        "    startup_idea = response.generations[0].text\n",
        "    print(idea_prompt)\n",
        "    print(\"startup_idea - pre\", startup_idea)\n",
        "    startup_idea = startup_idea.replace(\"\\n\\n--\", \"\").replace(\"\\n--\", \"\").strip()\n",
        "    print(\"startup_idea - post\", startup_idea)\n",
        "    print(\"-------------\")\n",
        "    return startup_idea\n"
      ],
      "metadata": {
        "id": "bpHPrSkSlwM-"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def generate_name(startup_idea, creativity):\n",
        "    \"\"\"\n",
        "    Generate startup name given a startup idea\n",
        "    Arguments:\n",
        "    idea(str): the startup idea\n",
        "    temperature(str): the Generate model `temperature` value\n",
        "    Returns:\n",
        "    response(str): the startup name\n",
        "    \"\"\"\n",
        "\n",
        "    name_prompt = f\"\"\"Generate a startup name and name given the startup idea. Here are a few examples.\n",
        "\n",
        "--\n",
        "Startup Idea: A platform that generates slide deck contents automatically based on a given outline\n",
        "Startup Name: Deckerize\n",
        "\n",
        "--\n",
        "Startup Idea: An app that calculates the best position of your indoor plants for your apartment\n",
        "Startup Name: Planteasy\n",
        "\n",
        "--\n",
        "Startup Idea: A hearing aid for the elderly that automatically adjusts its levels and with a battery \\\n",
        "lasting a whole week\n",
        "Startup Name: Hearspan\n",
        "\n",
        "--\n",
        "Startup Idea: An online primary school that lets students mix and match their own curriculum based on \\\n",
        "their interests and goals\n",
        "Startup Name: Prime Age\n",
        "\n",
        "--\n",
        "Startup Idea:{startup_idea}\n",
        "Startup Name:\"\"\"\n",
        "\n",
        "    # Call the Cohere Generate endpoint\n",
        "    response = co.generate(\n",
        "        model=\"command-nightly\",\n",
        "        prompt=name_prompt,\n",
        "        max_tokens=10,\n",
        "        temperature=creativity,\n",
        "        k=0,\n",
        "        stop_sequences=[\"--\"],\n",
        "    )\n",
        "    startup_name = response.generations[0].text\n",
        "    startup_name = startup_name.replace(\"\\n\\n--\", \"\").replace(\"\\n--\", \"\").strip()\n",
        "\n",
        "    return startup_name"
      ],
      "metadata": {
        "id": "sqv_tbKZmBUH"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# The front end code starts here\n",
        "\n",
        "st.title(\"🚀 Startup Idea Generator\")\n",
        "\n",
        "form = st.form(key=\"user_settings\")\n",
        "with form:\n",
        "    # User input - Industry name\n",
        "    industry_input = st.text_input(\"Industry\", key=\"industry_input\")\n",
        "\n",
        "    # Create a two-column view\n",
        "    col1, col2 = st.columns(2)\n",
        "    with col1:\n",
        "        # User input - The number of ideas to generate\n",
        "        num_input = st.slider(\n",
        "            \"Number of ideas\",\n",
        "            value=3,\n",
        "            key=\"num_input\",\n",
        "            min_value=1,\n",
        "            max_value=10,\n",
        "            help=\"Choose to generate between 1 to 10 ideas\",\n",
        "        )\n",
        "    with col2:\n",
        "        # User input - The 'temperature' value representing the level of creativity\n",
        "        creativity_input = st.slider(\n",
        "            \"Creativity\",\n",
        "            value=0.5,\n",
        "            key=\"creativity_input\",\n",
        "            min_value=0.1,\n",
        "            max_value=0.9,\n",
        "            help=\"Lower values generate more “predictable” output, higher values generate more “creative” output\",\n",
        "        )\n",
        "    # Submit button to start generating ideas\n",
        "    generate_button = form.form_submit_button(\"Generate Idea\")\n",
        "\n",
        "    if generate_button:\n",
        "        if industry_input == \"\":\n",
        "            st.error(\"Industry field cannot be blank\")\n",
        "        else:\n",
        "            my_bar = st.progress(0.05)\n",
        "            st.subheader(\"Startup Ideas:\")\n",
        "\n",
        "            for i in range(num_input):\n",
        "                st.markdown(\"\"\"---\"\"\")\n",
        "                idea = generate_idea(industry_input, creativity_input)\n",
        "                name = generate_name(idea, creativity_input)\n",
        "                st.markdown(\"##### \" + name)\n",
        "                st.write(idea)\n",
        "                my_bar.progress((i + 1) / num_input)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L2TbgCIpmBQf",
        "outputId": "a32ae3de-0e90-479d-95ab-a4f453ea5062"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2023-07-10 11:38:21.415 \n",
            "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
            "  command:\n",
            "\n",
            "    streamlit run /usr/local/lib/python3.10/dist-packages/ipykernel_launcher.py [ARGUMENTS]\n"
          ]
        }
      ]
    }
  ]
}